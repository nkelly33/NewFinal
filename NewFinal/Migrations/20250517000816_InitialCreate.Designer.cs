// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewFinal.Data;

#nullable disable

namespace NewFinal.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20250517000816_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NewFinal.Models.Abilities.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AbilityId")
                        .HasColumnType("int");

                    b.Property<string>("AbilityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttackBonus")
                        .HasColumnType("int");

                    b.Property<int>("DefenseBonus")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Ability");

                    b.HasDiscriminator().HasValue("Ability");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("NewFinal.Models.Characters.Enemy.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AggressionLevel")
                        .HasColumnType("int");

                    b.Property<int>("AttackPower")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<string>("MonsterType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("NewFinal.Models.Characters.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AbilityId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("NewFinal.Models.Equipments.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArmorId")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmorId");

                    b.HasIndex("WeaponId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("NewFinal.Models.Equipments.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("NewFinal.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EastRoomId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NorthRoomId")
                        .HasColumnType("int");

                    b.Property<int?>("SouthRoomId")
                        .HasColumnType("int");

                    b.Property<int?>("WestRoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EastRoomId");

                    b.HasIndex("NorthRoomId");

                    b.HasIndex("SouthRoomId");

                    b.HasIndex("WestRoomId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("NewFinal.Models.Abilities.MagicAbility", b =>
                {
                    b.HasBaseType("NewFinal.Models.Abilities.Ability");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<int>("ManaCost")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("MagicAbility");
                });

            modelBuilder.Entity("NewFinal.Models.Abilities.PhysicalAbility", b =>
                {
                    b.HasBaseType("NewFinal.Models.Abilities.Ability");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.ToTable("Ability", t =>
                        {
                            t.Property("Damage")
                                .HasColumnName("PhysicalAbility_Damage");
                        });

                    b.HasDiscriminator().HasValue("PhysicalAbility");
                });

            modelBuilder.Entity("NewFinal.Models.Abilities.Ability", b =>
                {
                    b.HasOne("NewFinal.Models.Abilities.Ability", null)
                        .WithMany("Abilities")
                        .HasForeignKey("AbilityId");

                    b.HasOne("NewFinal.Models.Characters.Player", null)
                        .WithMany("Abilities")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NewFinal.Models.Characters.Player", b =>
                {
                    b.HasOne("NewFinal.Models.Abilities.Ability", null)
                        .WithMany("Players")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NewFinal.Models.Equipments.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("NewFinal.Models.Room", "Room")
                        .WithMany("Players")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Equipment");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("NewFinal.Models.Equipments.Equipment", b =>
                {
                    b.HasOne("NewFinal.Models.Equipments.Item", "Armor")
                        .WithMany()
                        .HasForeignKey("ArmorId");

                    b.HasOne("NewFinal.Models.Equipments.Item", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponId");

                    b.Navigation("Armor");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("NewFinal.Models.Equipments.Item", b =>
                {
                    b.HasOne("NewFinal.Models.Characters.Player", null)
                        .WithMany("Inventory")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NewFinal.Models.Room", b =>
                {
                    b.HasOne("NewFinal.Models.Room", "EastRoom")
                        .WithMany()
                        .HasForeignKey("EastRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NewFinal.Models.Room", "NorthRoom")
                        .WithMany()
                        .HasForeignKey("NorthRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NewFinal.Models.Room", "SouthRoom")
                        .WithMany()
                        .HasForeignKey("SouthRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NewFinal.Models.Room", "WestRoom")
                        .WithMany()
                        .HasForeignKey("WestRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EastRoom");

                    b.Navigation("NorthRoom");

                    b.Navigation("SouthRoom");

                    b.Navigation("WestRoom");
                });

            modelBuilder.Entity("NewFinal.Models.Abilities.Ability", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("NewFinal.Models.Characters.Player", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("NewFinal.Models.Room", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
